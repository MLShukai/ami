help:  ## Show help
	@grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

clean: ## Clean autogenerated files
	rm -rf dist
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	rm -f .coverage

format: ## Run pre-commit hooks
	poetry run pre-commit run -a

sync: ## Merge changes from main branch to your current branch
	git fetch
	git pull

test: ## Run not slow tests
	poetry run pytest -v

test-full: ## Run all tests and coverage.
	poetry run pytest -v --slow

type:
	poetry run mypy .

run: format test-full type

NAME := $(shell whoami)
DOCKER_IMAGE_NAME := ami-vconf24:$(NAME)

docker-build: ## Build docker image.
	docker build -t $(DOCKER_IMAGE_NAME) --no-cache .

# Docker GPU Option.
USING_GPU_DEVICES := all # Index 0,1,2, ... or device UUID.

GPU_AVAILABLE := $(shell [ -f /proc/driver/nvidia/version ] && echo 1 || echo 0)

ifeq ($(GPU_AVAILABLE),1)
    DOCKER_GPU_OPTION := --gpus device=$(USING_GPU_DEVICES)
else
    DOCKER_GPU_OPTION :=
endif

docker-run: ## Run built docker image.
	docker run -it $(DOCKER_GPU_OPTION) \
	--mount type=volume,source=ami-vconf24_$(NAME),target=/workspace \
	$(DOCKER_IMAGE_NAME)

docker-run-host: ## Run the built Docker image along with network, camera, and other host OS device access
	docker run -it $(DOCKER_GPU_OPTION) \
	--mount type=volume,source=ami-vconf24_$(NAME),target=/workspace \
	--mount type=bind,source=`pwd`/logs,target=/workspace/logs \
	--device `v4l2-ctl --list-devices | grep -A 1 'OBS Virtual Camera' | grep -oP '\t\K/dev.*'`:/dev/video0:mwr \
	--net host \
	$(DOCKER_IMAGE_NAME)

docker-run-unity: ## Run the built Docker image with Unity executables
	docker run -it $(DOCKER_GPU_OPTION) \
	--mount type=volume,source=ami-vconf24_$(NAME),target=/workspace \
	--mount type=bind,source=`pwd`/logs,target=/workspace/logs \
	--mount type=bind,source=`pwd`/unity_executables,target=/workspace/unity_executables \
	$(DOCKER_IMAGE_NAME)

DATA_DIR := `pwd`/data
docker-run-with-data:
	docker run -it $(DOCKER_GPU_OPTION) \
	--mount type=volume,source=ami-vconf24_$(NAME),target=/workspace \
	--mount type=bind,source=`pwd`/logs,target=/workspace/logs \
	--mount type=bind,source=$(DATA_DIR),target=/workspace/data,readonly \
	$(DOCKER_IMAGE_NAME)

docker-attach: # 一番最後に起動したコンテナにアタッチする。
	@container_id=$$(docker ps --filter "ancestor=$(DOCKER_IMAGE_NAME)" --latest --quiet); \
	if [ -n "$$container_id" ]; then \
		echo "Attaching to container $$container_id"; \
		docker exec -it $$container_id bash; \
	else \
		echo "No running container with image '$(DOCKER_IMAGE_NAME)' found."; \
	fi
